---
name: Meson CI

"on":
  push:
    branches:
      - master
    paths:
      - 'include/**'
      - 'meson.build'
      - 'requirements.txt'
      - 'src/**'
      - 'subprojects/**'
      - 'tests/**'
  pull_request:
    branches:
      - master
    paths:
      - 'include/**'
      - 'meson.build'
      - 'requirements.txt'
      - 'src/**'
      - 'subprojects/**'
      - 'tests/**'

jobs:
  pre_ci:
    name: Prepare CI env
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      repo: ${{ steps.repo.outputs.repo }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - name: Get repo name
        id: repo
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}
          echo "Repo: ${REPO_NAME}"
          echo "##[set-output name=repo;]${REPO_NAME}"
  meson:
    name: Meson Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
    steps:
      - name: Checkout project
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - name: Check Cache
        uses: actions/cache@48af2dc4a9e8278b89d7fa154b955c30c6aaab09
        id: cache
        with:
          path: |
            ~/.local/bin
            ~/.local/lib
            build/
          key: |
            ${{ runner.os }}-meson-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/meson.build') }}
      - name: Install library deps
        run: |
          sudo apt update
          sudo apt install libarmadillo-dev libopenblas-dev rapidjson-dev
      - name: Install build deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install -r requirements.txt
      - name: Create pkgconfig local dir
        if: steps.cache.outputs.cache-hit != 'true'
        run: mkdir -p "$HOME/.local/lib/pkgconfig"
      - name: Setup some envs
        run: |
          echo "HOME=$HOME" >> $GITHUB_ENV
          echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$HOME/.local/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig" >> $GITHUB_ENV
      # note: armadillo.pc not shipped by libarmadillo-devel
      - name: Create armadillo.pc
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cat > $PKG_CONFIG_PATH/armadillo.pc << EOF
          libdir=/usr/include
          includedir=/usr/lib
          Name: armadillo
          Description: Fast C++ matrix library with syntax similar to MATLAB and Octave
          URL: http://arma.sourceforge.net
          Version: 9.800.4
          Cflags: -I${includedir}
          Libs: -L${libdir} -larmadillo
          EOF
      - name: Meson build and test
        run: |
          meson setup build --prefix $HOME/.local \
                            --libdir lib \
                            -Dtest=true \
                            -Db_coverage=true
          meson test -C build
      - name: Meson install
        run: meson install -C build
      - name: Run pgrank help
        run: pgrank --help
      - name: Check pgrank deps
        run: |
          pkg-config --cflags --libs json2mat
          pkg-config --cflags --libs pagerank
      - name: Meson coverage txt
        run: ninja coverage-text -C build
      - name: Meson coverage xml
        run: ninja coverage-xml -C build
      - name: Code coverage summary report
        uses: irongut/CodeCoverageSummary@5088d5eb315a46ff785c607078606c0b9107e0b6
        with:
          badge: true
          filename: build/meson-logs/coverage.xml
          format: 'markdown'
          hide_complexity: true
          output: both
      - name: Add coverage PR comment
        uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443
        if: ${{ github.event_name == 'pull_request' }}
        with:
          recreate: true
          path: code-coverage-results.md
      - name: Report coverage
        if: ${{ github.event_name == 'push' }}
        id: coverage
        run: |
          COVERAGE=$(cat build/meson-logs/coverage.txt \
                      | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
          echo "##[set-output name=coverage;]${COVERAGE}"
  badge:
    name: Coverage Badge
    needs:
      - pre_ci
      - meson
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions: {}
    env:
      gist_id: 0e20cd331d0800e3299298a3868aab7a
    outputs:
      markdown: ${{ steps.url.outputs.markdown }}
      url: ${{ steps.url.outputs.url }}
    steps:
      # note: Use the output from `coverage` id of `meson` job
      #       Use the output from `repo` ids of `pre_ci` job
      - name: Generate dynamic badge
        uses: schneegans/dynamic-badges-action@54d929a33e7521ab6bf19d323d28fb7b876c53f7
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          filename: ${{ needs.pre_ci.outputs.repo }}__${{ github.ref_name }}.json
          gistID: ${{ env.gist_id }}
          label: Coverage
          message: ${{ needs.meson.outputs.coverage }}%
          namedLogo: github
          style: flat-square
          valColorRange: ${{ needs.meson.outputs.coverage }}
          maxColorRange: 100
          minColorRange: 0
      - name: Badge image URL
        run: |
          URL="https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.actor }}/${{ env.gist_id }}/raw/${{ needs.pre_ci.outputs.repo }}__${{ github.ref_name }}.json"
          MARKDOWN="![Coverage](${URL})"
          echo "Badge URL: ${URL}"
          echo "Badge image for Markdown: ${MARKDOWN}"
